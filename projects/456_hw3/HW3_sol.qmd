
---
title: "Homework #3"
author: "Brian Gao"
date: May 31, 2024
---
```{python}
#------------------#
# ALCO case write up: Answer code
#------------------#
#------------------#
#-------------------------#
# Load data
#-------------------------#
import math
import pandas as pd
import numpy as np

# computes the mean of a list of values, ignoring NaNs
def mean(listOfValues):
    return np.nanmean(listOfValues)

cv = lambda x: np.std(x, ddof=1) / np.mean(x)

xls = pd.ExcelFile('data/Homework3_data.xlsx')
product1 = pd.read_excel(xls, 'Product1')
product2 = pd.read_excel(xls, 'Product2')
product3 = pd.read_excel(xls, 'Product3')

print(product1.describe())
print(product2.describe())
print(product3.describe())

# Settings
lt = 11
tSL = 0.95

# Analysis
def calculateInventoryCost(tSL, shippingCost, dfSite):
    rollingSum = dfSite.rolling(window=lt).sum()
    ltDemand = rollingSum.dropna().values
    OUL = np.quantile(ltDemand, tSL)
    SS = OUL - lt * mean(dfSite)
    OrderQ = 6 * mean(dfSite)  # Ensure this value is justified
    cycleStock = OrderQ / 2
    inventory = SS + cycleStock
    holdingCost = inventory * 0.15
    ShippingCost = mean(dfSite) * shippingCost
    return {
        'CycleStock': cycleStock,
        'OUL': OUL,
        'SafetyStock': SS,
        'Inventory': inventory,
        'HoldingCost': holdingCost,
        'ShippingCost': ShippingCost,
        "OrderQ": OrderQ
    }

# Product 1
Region1 = calculateInventoryCost(tSL, 0.19, product1['Region1'])
Region2 = calculateInventoryCost(tSL, 0.19, product1['Region2'])
Region3 = calculateInventoryCost(tSL, 0.19, product1['Region3'])
Region4 = calculateInventoryCost(tSL, 0.19, product1['Region4'])
Central = calculateInventoryCost(tSL, 0.29, product1.sum(axis=1))

print("Product 1 holding cost:", Region1['HoldingCost'] + Region2['HoldingCost'] + Region3['HoldingCost'] + Region4['HoldingCost'])
print("Product 1 shipping cost:", Region1['ShippingCost'] + Region2['ShippingCost'] + Region3['ShippingCost'] + Region4['ShippingCost'])

print("Product 1 Central holding cost:", Central['HoldingCost'])
print("Product 1 Central shipping cost:", Central['ShippingCost'])

print(product1.apply(cv))
print(product1.corr())
print("---------------------------------------------------------------")

# Product 2
Region1 = calculateInventoryCost(tSL, 0.19, product2['Region1'])
Region2 = calculateInventoryCost(tSL, 0.19, product2['Region2'])
Region3 = calculateInventoryCost(tSL, 0.19, product2['Region3'])
Region4 = calculateInventoryCost(tSL, 0.19, product2['Region4'])
Central = calculateInventoryCost(tSL, 0.29, product2.sum(axis=1))

print("Product 2 holding cost:", Region1['HoldingCost'] + Region2['HoldingCost'] + Region3['HoldingCost'] + Region4['HoldingCost'])
print("Product 2 shipping cost:", Region1['ShippingCost'] + Region2['ShippingCost'] + Region3['ShippingCost'] + Region4['ShippingCost'])

print("Product 2 Central holding cost:", Central['HoldingCost'])
print("Product 2 Central shipping cost:", Central['ShippingCost'])

print(product2.apply(cv))
print(product2.corr())
print("---------------------------------------------------------------")

# Product 3
Region1 = calculateInventoryCost(tSL, 0.19, product3['Region1'])
Region2 = calculateInventoryCost(tSL, 0.19, product3['Region2'])
Region3 = calculateInventoryCost(tSL, 0.19, product3['Region3'])
Region4 = calculateInventoryCost(tSL, 0.19, product3['Region4'])
Central = calculateInventoryCost(tSL, 0.29, product3.sum(axis=1))

print("Product 3 holding cost:", Region1['HoldingCost'] + Region2['HoldingCost'] + Region3['HoldingCost'] + Region4['HoldingCost'])
print("Product 3 shipping cost:", Region1['ShippingCost'] + Region2['ShippingCost'] + Region3['ShippingCost'] + Region4['ShippingCost'])
print("Product 3 Central holding cost:", Central['HoldingCost'])
print("Product 3 Central shipping cost:", Central['ShippingCost'])

print(product3.apply(cv))
print(product3.corr())
print("---------------------------------------------------------------")

```