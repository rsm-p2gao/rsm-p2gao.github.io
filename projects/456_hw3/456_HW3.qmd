---
title: "Homework #3"
author: "Brian Gao"
date: May 31, 2024
---

```{python}
#| echo: false
import pandas as pd

# Load the data from the uploaded Excel file
file_path = 'data/Homework3_data.xlsx'
data = pd.read_excel(file_path, sheet_name=None)

```

### Product 1
#### Regional distribution center
```{python}
import numpy as np

# Define parameters
review_interval = 6  # days
lead_time = 5  # days
cycle_service_level = 0.95
holding_cost_per_unit_per_day = 0.15
inbound_transportation_cost_per_unit = 0.09
outbound_transportation_cost_per_unit = 0.10

# Calculate z-score for 95% cycle service level
z_score = 1.645  # Approximate value for 95% service level

# Extract data for Product 1
product1_data = data['Product1']

# Initialize a dictionary to store the results
results = {
    'Region': [],
    'OUL': [],
    'Average Order Quantity': [],
    'Average Cycle Stock': [],
    'Average Safety Stock': [],
    'Average Inventory': [],
    'Daily Average Inventory Holding Cost': [],
    'Daily Average Transportation Cost': [],
    'Total Daily Average Cost': []
}

# Perform calculations for each region
for region in product1_data.columns:
    daily_demand = product1_data[region]
    d = daily_demand.mean()
    sigma_d = daily_demand.std()
    
    # Calculate Safety Stock
    SS = z_score * sigma_d * np.sqrt(lead_time)
    
    # Calculate Order-Up-To Level (OUL)
    OUL = d * (review_interval + lead_time) + SS
    
    # Calculate Average Order Quantity
    average_order_quantity = d * review_interval
    
    # Calculate Average Cycle Stock
    average_cycle_stock = average_order_quantity / 2
    
    # Calculate Average Inventory
    average_inventory = average_cycle_stock + SS
    
    # Calculate Daily Average Inventory Holding Cost
    daily_average_inventory_holding_cost = average_inventory * holding_cost_per_unit_per_day
    
    # Calculate Daily Average Transportation Cost
    daily_average_transportation_cost = (inbound_transportation_cost_per_unit + outbound_transportation_cost_per_unit) * d
    
    # Calculate Total Daily Average Cost
    total_daily_average_cost = daily_average_inventory_holding_cost + daily_average_transportation_cost
    
    # Store the results
    results['Region'].append(region)
    results['OUL'].append(OUL)
    results['Average Order Quantity'].append(average_order_quantity)
    results['Average Cycle Stock'].append(average_cycle_stock)
    results['Average Safety Stock'].append(SS)
    results['Average Inventory'].append(average_inventory)
    results['Daily Average Inventory Holding Cost'].append(daily_average_inventory_holding_cost)
    results['Daily Average Transportation Cost'].append(daily_average_transportation_cost)
    results['Total Daily Average Cost'].append(total_daily_average_cost)

# Convert results to DataFrame for better readability
results_df = pd.DataFrame(results)

results_df


```

#### National distribution center
```{python}
 # Define new transportation costs for the National distribution center
national_inbound_transportation_cost_per_unit = 0.05
national_outbound_transportation_cost_per_unit = 0.24

# Combine the demand data from all regions to represent the National distribution center
national_daily_demand = product1_data.sum(axis=1)
d_national = national_daily_demand.mean()
sigma_d_national = national_daily_demand.std()

# Calculate Safety Stock for the National distribution center
SS_national = z_score * sigma_d_national * np.sqrt(lead_time)

# Calculate Order-Up-To Level (OUL) for the National distribution center
OUL_national = d_national * (review_interval + lead_time) + SS_national

# Calculate Average Order Quantity for the National distribution center
average_order_quantity_national = d_national * review_interval

# Calculate Average Cycle Stock for the National distribution center
average_cycle_stock_national = average_order_quantity_national / 2

# Calculate Average Inventory for the National distribution center
average_inventory_national = average_cycle_stock_national + SS_national

# Calculate Daily Average Inventory Holding Cost for the National distribution center
daily_average_inventory_holding_cost_national = average_inventory_national * holding_cost_per_unit_per_day

# Calculate Daily Average Transportation Cost for the National distribution center
daily_average_transportation_cost_national = (national_inbound_transportation_cost_per_unit + national_outbound_transportation_cost_per_unit) * d_national

# Calculate Total Daily Average Cost for the National distribution center
total_daily_average_cost_national = daily_average_inventory_holding_cost_national + daily_average_transportation_cost_national

# Store the results in a dictionary
national_results = {
    'Metric': ['OUL', 'Average Order Quantity', 'Average Cycle Stock', 'Average Safety Stock', 'Average Inventory', 'Daily Average Inventory Holding Cost', 'Daily Average Transportation Cost', 'Total Daily Average Cost'],
    'Value': [OUL_national, average_order_quantity_national, average_cycle_stock_national, SS_national, average_inventory_national, daily_average_inventory_holding_cost_national, daily_average_transportation_cost_national, total_daily_average_cost_national]
}

# Convert results to DataFrame for better readability
national_results_df = pd.DataFrame(national_results)
national_results_df

```

* Regional Total Daily Cost: $87.56
* National Total Daily Cost: $94.18

For Product 1, the regional distribution centers have a lower total daily cost compared to the national distribution center. Therefore, the regional distribution center model is recommended for Product 1.

### Product 2
#### Regional distribution center
```{python}
#| echo: false
# Extract data for Product 1
product2_data = data['Product2']

# Initialize a dictionary to store the results
results = {
    'Region': [],
    'OUL': [],
    'Average Order Quantity': [],
    'Average Cycle Stock': [],
    'Average Safety Stock': [],
    'Average Inventory': [],
    'Daily Average Inventory Holding Cost': [],
    'Daily Average Transportation Cost': [],
    'Total Daily Average Cost': []
}

# Perform calculations for each region
for region in product2_data.columns:
    daily_demand = product2_data[region]
    d = daily_demand.mean()
    sigma_d = daily_demand.std()
    
    # Calculate Safety Stock
    SS = z_score * sigma_d * np.sqrt(lead_time)
    
    # Calculate Order-Up-To Level (OUL)
    OUL = d * (review_interval + lead_time) + SS
    
    # Calculate Average Order Quantity
    average_order_quantity = d * review_interval
    
    # Calculate Average Cycle Stock
    average_cycle_stock = average_order_quantity / 2
    
    # Calculate Average Inventory
    average_inventory = average_cycle_stock + SS
    
    # Calculate Daily Average Inventory Holding Cost
    daily_average_inventory_holding_cost = average_inventory * holding_cost_per_unit_per_day
    
    # Calculate Daily Average Transportation Cost
    daily_average_transportation_cost = (inbound_transportation_cost_per_unit + outbound_transportation_cost_per_unit) * d
    
    # Calculate Total Daily Average Cost
    total_daily_average_cost = daily_average_inventory_holding_cost + daily_average_transportation_cost
    
    # Store the results
    results['Region'].append(region)
    results['OUL'].append(OUL)
    results['Average Order Quantity'].append(average_order_quantity)
    results['Average Cycle Stock'].append(average_cycle_stock)
    results['Average Safety Stock'].append(SS)
    results['Average Inventory'].append(average_inventory)
    results['Daily Average Inventory Holding Cost'].append(daily_average_inventory_holding_cost)
    results['Daily Average Transportation Cost'].append(daily_average_transportation_cost)
    results['Total Daily Average Cost'].append(total_daily_average_cost)

# Convert results to DataFrame for better readability
results_df2 = pd.DataFrame(results)

results_df2
```

#### National distribution center
```{python}
#| echo: false
 # Define new transportation costs for the National distribution center
national_inbound_transportation_cost_per_unit = 0.05
national_outbound_transportation_cost_per_unit = 0.24

# Combine the demand data from all regions to represent the National distribution center
national_daily_demand = product2_data.sum(axis=1)
d_national = national_daily_demand.mean()
sigma_d_national = national_daily_demand.std()

# Calculate Safety Stock for the National distribution center
SS_national = z_score * sigma_d_national * np.sqrt(lead_time)

# Calculate Order-Up-To Level (OUL) for the National distribution center
OUL_national = d_national * (review_interval + lead_time) + SS_national

# Calculate Average Order Quantity for the National distribution center
average_order_quantity_national = d_national * review_interval

# Calculate Average Cycle Stock for the National distribution center
average_cycle_stock_national = average_order_quantity_national / 2

# Calculate Average Inventory for the National distribution center
average_inventory_national = average_cycle_stock_national + SS_national

# Calculate Daily Average Inventory Holding Cost for the National distribution center
daily_average_inventory_holding_cost_national = average_inventory_national * holding_cost_per_unit_per_day

# Calculate Daily Average Transportation Cost for the National distribution center
daily_average_transportation_cost_national = (national_inbound_transportation_cost_per_unit + national_outbound_transportation_cost_per_unit) * d_national

# Calculate Total Daily Average Cost for the National distribution center
total_daily_average_cost_national = daily_average_inventory_holding_cost_national + daily_average_transportation_cost_national

# Store the results in a dictionary
national_results = {
    'Metric': ['OUL', 'Average Order Quantity', 'Average Cycle Stock', 'Average Safety Stock', 'Average Inventory', 'Daily Average Inventory Holding Cost', 'Daily Average Transportation Cost', 'Total Daily Average Cost'],
    'Value': [OUL_national, average_order_quantity_national, average_cycle_stock_national, SS_national, average_inventory_national, daily_average_inventory_holding_cost_national, daily_average_transportation_cost_national, total_daily_average_cost_national]
}

# Convert results to DataFrame for better readability
national_results_df2 = pd.DataFrame(national_results)
national_results_df2
```

### Product 3
#### Regional distribution center
```{python}
#| echo: false
# Extract data for Product 1
product3_data = data['Product3']

# Initialize a dictionary to store the results
results = {
    'Region': [],
    'OUL': [],
    'Average Order Quantity': [],
    'Average Cycle Stock': [],
    'Average Safety Stock': [],
    'Average Inventory': [],
    'Daily Average Inventory Holding Cost': [],
    'Daily Average Transportation Cost': [],
    'Total Daily Average Cost': []
}

# Perform calculations for each region
for region in product3_data.columns:
    daily_demand = product3_data[region]
    d = daily_demand.mean()
    sigma_d = daily_demand.std()
    
    # Calculate Safety Stock
    SS = z_score * sigma_d * np.sqrt(lead_time)
    
    # Calculate Order-Up-To Level (OUL)
    OUL = d * (review_interval + lead_time) + SS
    
    # Calculate Average Order Quantity
    average_order_quantity = d * review_interval
    
    # Calculate Average Cycle Stock
    average_cycle_stock = average_order_quantity / 2
    
    # Calculate Average Inventory
    average_inventory = average_cycle_stock + SS
    
    # Calculate Daily Average Inventory Holding Cost
    daily_average_inventory_holding_cost = average_inventory * holding_cost_per_unit_per_day
    
    # Calculate Daily Average Transportation Cost
    daily_average_transportation_cost = (inbound_transportation_cost_per_unit + outbound_transportation_cost_per_unit) * d
    
    # Calculate Total Daily Average Cost
    total_daily_average_cost = daily_average_inventory_holding_cost + daily_average_transportation_cost
    
    # Store the results
    results['Region'].append(region)
    results['OUL'].append(OUL)
    results['Average Order Quantity'].append(average_order_quantity)
    results['Average Cycle Stock'].append(average_cycle_stock)
    results['Average Safety Stock'].append(SS)
    results['Average Inventory'].append(average_inventory)
    results['Daily Average Inventory Holding Cost'].append(daily_average_inventory_holding_cost)
    results['Daily Average Transportation Cost'].append(daily_average_transportation_cost)
    results['Total Daily Average Cost'].append(total_daily_average_cost)

# Convert results to DataFrame for better readability
results_df3 = pd.DataFrame(results)

results_df3
```

#### National distribution center
```{python}
#| echo: false
# Define new transportation costs for the National distribution center
national_inbound_transportation_cost_per_unit = 0.05
national_outbound_transportation_cost_per_unit = 0.24

# Combine the demand data from all regions to represent the National distribution center
national_daily_demand = product3_data.sum(axis=1)
d_national = national_daily_demand.mean()
sigma_d_national = national_daily_demand.std()

# Calculate Safety Stock for the National distribution center
SS_national = z_score * sigma_d_national * np.sqrt(lead_time)

# Calculate Order-Up-To Level (OUL) for the National distribution center
OUL_national = d_national * (review_interval + lead_time) + SS_national

# Calculate Average Order Quantity for the National distribution center
average_order_quantity_national = d_national * review_interval

# Calculate Average Cycle Stock for the National distribution center
average_cycle_stock_national = average_order_quantity_national / 2

# Calculate Average Inventory for the National distribution center
average_inventory_national = average_cycle_stock_national + SS_national

# Calculate Daily Average Inventory Holding Cost for the National distribution center
daily_average_inventory_holding_cost_national = average_inventory_national * holding_cost_per_unit_per_day

# Calculate Daily Average Transportation Cost for the National distribution center
daily_average_transportation_cost_national = (national_inbound_transportation_cost_per_unit + national_outbound_transportation_cost_per_unit) * d_national

# Calculate Total Daily Average Cost for the National distribution center
total_daily_average_cost_national = daily_average_inventory_holding_cost_national + daily_average_transportation_cost_national

# Store the results in a dictionary
national_results = {
    'Metric': ['OUL', 'Average Order Quantity', 'Average Cycle Stock', 'Average Safety Stock', 'Average Inventory', 'Daily Average Inventory Holding Cost', 'Daily Average Transportation Cost', 'Total Daily Average Cost'],
    'Value': [OUL_national, average_order_quantity_national, average_cycle_stock_national, SS_national, average_inventory_national, daily_average_inventory_holding_cost_national, daily_average_transportation_cost_national, total_daily_average_cost_national]
}

# Convert results to DataFrame for better readability
national_results_df2 = pd.DataFrame(national_results)
national_results_df2
```



* Regional Total Daily Cost(Products 2): $32.51
* National Total Daily Cost(Products 2): $33.35

* Regional Total Daily Cost(Products 3): $32.11
* National Total Daily Cost(Products 3): $34.65

For Products 2 and 3, the regional distribution centers also have a lower total daily cost compared to the national distribution center. Hence, the regional distribution center model is preferable for these products as well.

### Why National vs. Regional Distribution Centers Differ
The differences in costs between national and regional distribution centers can be attributed to several factors:

**Transportation Costs:**

* National distribution centers generally have lower inbound transportation costs due to economies of scale but higher outbound transportation costs since the distribution center is located further from the end customers.
* Regional distribution centers, while having higher inbound transportation costs, benefit from lower outbound transportation costs as they are closer to the end customers.

**Demand Aggregation:**

* National distribution centers can aggregate demand from multiple regions, which can reduce variability and potentially lower safety stock requirements.
* However, this aggregation doesn't always lead to significant savings, especially if the outbound transportation costs are substantially higher.

**Inventory Holding Costs:**

* The holding costs are influenced by the level of safety stock and average inventory. National distribution centers might need higher safety stock due to aggregated demand variability, leading to higher holding costs. 

In this specific case, the regional distribution centers tend to have a cost advantage across all three products, likely due to the balance between transportation costs and inventory holding costs.